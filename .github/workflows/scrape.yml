name: Client Monitor MD Supabase
on:
  workflow_dispatch:
  schedule:
    # Executa a cada 3 horas
    - cron: '0 */3 * * *'
    # Limpeza mensal do banco (primeiro dia do m√™s √†s 02:00 UTC)
    - cron: '0 2 1 * *'

jobs:
  monitor-lojas:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Timeout de seguran√ßa
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libnss3-dev \
            libatk-bridge2.0-dev \
            libdrm-dev \
            libxcomposite-dev \
            libxdamage-dev \
            libxrandr-dev \
            libgbm-dev \
            libxss-dev \
            libasound2-dev
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: backend
          
      - name: Install Playwright browsers
        run: |
          playwright install chromium
          
      - name: Verify Supabase connection
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          python -c "
          import os
          from supabase import create_client
          try:
              supabase = create_client(os.getenv('SUPABASE_URL'), os.getenv('SUPABASE_KEY'))
              response = supabase.table('clientes').select('count').execute()
              print('‚úÖ Conex√£o com Supabase OK')
          except Exception as e:
              print(f'‚ùå Erro na conex√£o com Supabase: {e}')
              exit(1)
          "
        working-directory: backend
          
      - name: Run monitor script
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          ADMIN_CHAT_ID: ${{ secrets.ADMIN_CHAT_ID }}
          GITHUB_ACTIONS: true
          GERAR_EXCEL: false  # Desabilita Excel para economizar recursos
        run: python client_monitor_supabase.py
        working-directory: backend
      
      - name: Check execution status
        if: always()
        run: |
          if [ -f "log_extracao.log" ]; then
            echo "üìä √öltimas linhas do log:"
            tail -20 log_extracao.log
            
            # Verificar se houve erros cr√≠ticos
            if grep -q "CRITICAL\|ERROR" log_extracao.log; then
              echo "‚ö†Ô∏è Erros encontrados no log"
              exit 1
            else
              echo "‚úÖ Execu√ß√£o conclu√≠da sem erros cr√≠ticos"
            fi
          else
            echo "‚ùå Log n√£o encontrado"
            exit 1
          fi
        working-directory: backend
      
      - name: Upload logs as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ github.run_number }}
          path: |
            backend/log_extracao.log
            backend/relatorio_*.xlsx
          retention-days: 30
          
      - name: Cleanup temporary files
        if: always()
        run: |
          # Remove arquivos tempor√°rios para liberar espa√ßo
          rm -f relatorio_*.xlsx
          rm -f *.png
          echo "üßπ Arquivos tempor√°rios removidos"
        working-directory: backend

  # Job para limpeza mensal do banco
  limpeza-banco:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 1 * *'  # S√≥ executa na limpeza mensal
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: backend
      
      - name: Run database cleanup
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          ADMIN_CHAT_ID: ${{ secrets.ADMIN_CHAT_ID }}
        run: |
          python -c "
          import os
          from supabase import create_client
          from datetime import datetime, timedelta
          
          try:
              supabase = create_client(os.getenv('SUPABASE_URL'), os.getenv('SUPABASE_KEY'))
              
              # Data limite: 30 dias atr√°s
              data_limite = (datetime.now() - timedelta(days=30)).isoformat()
              
              # Limpar dados antigos das tabelas
              print('üßπ Iniciando limpeza mensal do banco...')
              
              # Limpar execu√ß√µes antigas
              response = supabase.table('execucoes').delete().lt('executado_em', data_limite).execute()
              print(f'üóëÔ∏è Execu√ß√µes antigas removidas: {len(response.data) if response.data else 0}')
              
              # Limpar dados de lojas antigos
              response = supabase.table('lojas_dados').delete().lt('data_coleta', data_limite).execute()
              print(f'üóëÔ∏è Dados de lojas antigos removidos: {len(response.data) if response.data else 0}')
              
              # Limpar m√©tricas antigas
              response = supabase.table('metricas_periodicas').delete().lt('data_referencia', data_limite).execute()
              print(f'üóëÔ∏è M√©tricas antigas removidas: {len(response.data) if response.data else 0}')
              
              print('‚úÖ Limpeza mensal conclu√≠da com sucesso!')
              
          except Exception as e:
              print(f'‚ùå Erro na limpeza: {e}')
              exit(1)
          "
      
      - name: Notify cleanup completion
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          ADMIN_CHAT_ID: ${{ secrets.ADMIN_CHAT_ID }}
        run: |
          if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$ADMIN_CHAT_ID" ]; then
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d chat_id="$ADMIN_CHAT_ID" \
              -d text="üßπ **Limpeza Mensal do Banco Conclu√≠da**%0A%0A‚úÖ Dados antigos (30+ dias) foram removidos%0Aüíæ Espa√ßo liberado no banco de dados%0Aüïê **Executado em:** $(date +'%d/%m/%Y √†s %H:%M:%S UTC')" \
              -d parse_mode="Markdown"
          fi

  # Job adicional para monitoramento de sa√∫de
  health-check:
    runs-on: ubuntu-latest
    needs: [monitor-lojas, limpeza-banco]
    if: always()
    
    steps:
      - name: Check workflow health
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          ADMIN_CHAT_ID: ${{ secrets.ADMIN_CHAT_ID }}
        run: |
          # Verificar status dos jobs anteriores
          if [ "${{ needs.monitor-lojas.result }}" == "success" ] && [ "${{ needs.limpeza-banco.result }}" != "failure" ]; then
            STATUS="‚úÖ SUCESSO"
            MESSAGE="Monitoramento executado com sucesso!"
          elif [ "${{ needs.monitor-lojas.result }}" == "failure" ]; then
            STATUS="‚ùå FALHA"
            MESSAGE="Erro na execu√ß√£o do monitoramento. Verifique os logs."
          else
            STATUS="‚ö†Ô∏è PARCIAL"
            MESSAGE="Execu√ß√£o parcial com alguns problemas."
          fi
          
          # Enviar notifica√ß√£o para admin
          if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$ADMIN_CHAT_ID" ]; then
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d chat_id="$ADMIN_CHAT_ID" \
              -d text="ü§ñ **GitHub Actions - Status da Execu√ß√£o**%0A%0A$STATUS%0A$MESSAGE%0A%0Aüïê **Hor√°rio:** $(date +'%d/%m/%Y √†s %H:%M:%S UTC')%0Aüîó **Workflow:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
              -d parse_mode="Markdown"
          fi